/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HasherBenchmarksInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "hash2"
      | "hash3"
      | "hash4"
      | "hash5"
      | "hash5Benchmark"
      | "hashLeftRight"
      | "hashLeftRightBenchmark"
      | "sha256Hash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5Benchmark",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRightBenchmark",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hash5Benchmark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRightBenchmark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
}

export interface HasherBenchmarks extends BaseContract {
  connect(runner?: ContractRunner | null): HasherBenchmarks;
  waitForDeployment(): Promise<this>;

  interface: HasherBenchmarksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hash2: TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash3: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash4: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash5: TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;

  hash5Benchmark: TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;

  hashLeftRight: TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;

  hashLeftRightBenchmark: TypedContractMethod<
    [_left: BigNumberish, _right: BigNumberish],
    [bigint],
    "view"
  >;

  sha256Hash: TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hash2"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash3"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash4"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash5"
  ): TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash5Benchmark"
  ): TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashLeftRightBenchmark"
  ): TypedContractMethod<
    [_left: BigNumberish, _right: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sha256Hash"
  ): TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;

  filters: {};
}
