/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DomainObjs {
  export type MessageStruct = { msgType: BigNumberish; data: BigNumberish[] };

  export type MessageStructOutput = [msgType: bigint, data: bigint[]] & {
    msgType: bigint;
    data: bigint[];
  };

  export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type PubKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };

  export type StateLeafStruct = {
    pubKey: DomainObjs.PubKeyStruct;
    voiceCreditBalance: BigNumberish;
    timestamp: BigNumberish;
  };

  export type StateLeafStructOutput = [
    pubKey: DomainObjs.PubKeyStructOutput,
    voiceCreditBalance: bigint,
    timestamp: bigint
  ] & {
    pubKey: DomainObjs.PubKeyStructOutput;
    voiceCreditBalance: bigint;
    timestamp: bigint;
  };
}

export interface UtilitiesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MESSAGE_DATA_LENGTH"
      | "hash2"
      | "hash3"
      | "hash4"
      | "hash5"
      | "hashLeftRight"
      | "hashMessageAndEncPubKey"
      | "hashStateLeaf"
      | "padAndHashMessage"
      | "sha256Hash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MESSAGE_DATA_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessageAndEncPubKey",
    values: [DomainObjs.MessageStruct, DomainObjs.PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashStateLeaf",
    values: [DomainObjs.StateLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "padAndHashMessage",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_DATA_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessageAndEncPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "padAndHashMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
}

export interface Utilities extends BaseContract {
  connect(runner?: ContractRunner | null): Utilities;
  waitForDeployment(): Promise<this>;

  interface: UtilitiesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MESSAGE_DATA_LENGTH: TypedContractMethod<[], [bigint], "view">;

  hash2: TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash3: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash4: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash5: TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;

  hashLeftRight: TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;

  hashMessageAndEncPubKey: TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [bigint],
    "view"
  >;

  hashStateLeaf: TypedContractMethod<
    [_stateLeaf: DomainObjs.StateLeafStruct],
    [bigint],
    "view"
  >;

  padAndHashMessage: TypedContractMethod<
    [dataToPad: [BigNumberish, BigNumberish], msgType: BigNumberish],
    [
      [
        DomainObjs.MessageStructOutput,
        DomainObjs.PubKeyStructOutput,
        bigint
      ] & {
        message: DomainObjs.MessageStructOutput;
        padKey: DomainObjs.PubKeyStructOutput;
        msgHash: bigint;
      }
    ],
    "view"
  >;

  sha256Hash: TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MESSAGE_DATA_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hash2"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash3"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash4"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash5"
  ): TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashMessageAndEncPubKey"
  ): TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashStateLeaf"
  ): TypedContractMethod<
    [_stateLeaf: DomainObjs.StateLeafStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "padAndHashMessage"
  ): TypedContractMethod<
    [dataToPad: [BigNumberish, BigNumberish], msgType: BigNumberish],
    [
      [
        DomainObjs.MessageStructOutput,
        DomainObjs.PubKeyStructOutput,
        bigint
      ] & {
        message: DomainObjs.MessageStructOutput;
        padKey: DomainObjs.PubKeyStructOutput;
        msgHash: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sha256Hash"
  ): TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;

  filters: {};
}
