/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Params {
  export type MaxValuesStruct = {
    maxMessages: BigNumberish;
    maxVoteOptions: BigNumberish;
  };

  export type MaxValuesStructOutput = [
    maxMessages: bigint,
    maxVoteOptions: bigint
  ] & { maxMessages: bigint; maxVoteOptions: bigint };

  export type TreeDepthsStruct = {
    intStateTreeDepth: BigNumberish;
    messageTreeSubDepth: BigNumberish;
    messageTreeDepth: BigNumberish;
    voteOptionTreeDepth: BigNumberish;
  };

  export type TreeDepthsStructOutput = [
    intStateTreeDepth: bigint,
    messageTreeSubDepth: bigint,
    messageTreeDepth: bigint,
    voteOptionTreeDepth: bigint
  ] & {
    intStateTreeDepth: bigint;
    messageTreeSubDepth: bigint;
    messageTreeDepth: bigint;
    voteOptionTreeDepth: bigint;
  };

  export type ExtContractsStruct = {
    maci: AddressLike;
    messageAq: AddressLike;
    topupCredit: AddressLike;
  };

  export type ExtContractsStructOutput = [
    maci: string,
    messageAq: string,
    topupCredit: string
  ] & { maci: string; messageAq: string; topupCredit: string };
}

export declare namespace DomainObjs {
  export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type PubKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };

  export type MessageStruct = { msgType: BigNumberish; data: BigNumberish[] };

  export type MessageStructOutput = [msgType: bigint, data: bigint[]] & {
    msgType: bigint;
    data: bigint[];
  };

  export type StateLeafStruct = {
    pubKey: DomainObjs.PubKeyStruct;
    voiceCreditBalance: BigNumberish;
    timestamp: BigNumberish;
  };

  export type StateLeafStructOutput = [
    pubKey: DomainObjs.PubKeyStructOutput,
    voiceCreditBalance: bigint,
    timestamp: bigint
  ] & {
    pubKey: DomainObjs.PubKeyStructOutput;
    voiceCreditBalance: bigint;
    timestamp: bigint;
  };
}

export interface PollInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MESSAGE_DATA_LENGTH"
      | "coordinatorPubKey"
      | "coordinatorPubKeyHash"
      | "currentSbCommitment"
      | "extContracts"
      | "getDeployTimeAndDuration"
      | "hash2"
      | "hash3"
      | "hash4"
      | "hash5"
      | "hashLeftRight"
      | "hashMessageAndEncPubKey"
      | "hashStateLeaf"
      | "init"
      | "maxValues"
      | "mergeMaciStateAq"
      | "mergeMaciStateAqSubRoots"
      | "mergeMessageAq"
      | "mergeMessageAqSubRoots"
      | "mergedStateRoot"
      | "numMessages"
      | "numSignUpsAndMessages"
      | "numSignups"
      | "owner"
      | "padAndHashMessage"
      | "publishMessage"
      | "publishMessageBatch"
      | "renounceOwnership"
      | "sha256Hash"
      | "stateAqMerged"
      | "topup"
      | "transferOwnership"
      | "treeDepths"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MergeMaciStateAq"
      | "MergeMaciStateAqSubRoots"
      | "MergeMessageAq"
      | "MergeMessageAqSubRoots"
      | "OwnershipTransferred"
      | "PublishMessage"
      | "TopupMessage"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MESSAGE_DATA_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployTimeAndDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessageAndEncPubKey",
    values: [DomainObjs.MessageStruct, DomainObjs.PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashStateLeaf",
    values: [DomainObjs.StateLeafStruct]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxValues", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mergeMaciStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMaciStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAqSubRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergedStateRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUpsAndMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSignups",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "padAndHashMessage",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [DomainObjs.MessageStruct, DomainObjs.PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessageBatch",
    values: [DomainObjs.MessageStruct[], DomainObjs.PubKeyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stateAqMerged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treeDepths",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_DATA_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployTimeAndDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessageAndEncPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxValues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mergeMaciStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMaciStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergedStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numSignUpsAndMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numSignups", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "padAndHashMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessageBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateAqMerged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treeDepths", data: BytesLike): Result;
}

export namespace MergeMaciStateAqEvent {
  export type InputTuple = [
    _stateRoot: BigNumberish,
    _numSignups: BigNumberish
  ];
  export type OutputTuple = [_stateRoot: bigint, _numSignups: bigint];
  export interface OutputObject {
    _stateRoot: bigint;
    _numSignups: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MergeMaciStateAqSubRootsEvent {
  export type InputTuple = [_numSrQueueOps: BigNumberish];
  export type OutputTuple = [_numSrQueueOps: bigint];
  export interface OutputObject {
    _numSrQueueOps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MergeMessageAqEvent {
  export type InputTuple = [_messageRoot: BigNumberish];
  export type OutputTuple = [_messageRoot: bigint];
  export interface OutputObject {
    _messageRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MergeMessageAqSubRootsEvent {
  export type InputTuple = [_numSrQueueOps: BigNumberish];
  export type OutputTuple = [_numSrQueueOps: bigint];
  export interface OutputObject {
    _numSrQueueOps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublishMessageEvent {
  export type InputTuple = [
    _message: DomainObjs.MessageStruct,
    _encPubKey: DomainObjs.PubKeyStruct
  ];
  export type OutputTuple = [
    _message: DomainObjs.MessageStructOutput,
    _encPubKey: DomainObjs.PubKeyStructOutput
  ];
  export interface OutputObject {
    _message: DomainObjs.MessageStructOutput;
    _encPubKey: DomainObjs.PubKeyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopupMessageEvent {
  export type InputTuple = [_message: DomainObjs.MessageStruct];
  export type OutputTuple = [_message: DomainObjs.MessageStructOutput];
  export interface OutputObject {
    _message: DomainObjs.MessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Poll extends BaseContract {
  connect(runner?: ContractRunner | null): Poll;
  waitForDeployment(): Promise<this>;

  interface: PollInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MESSAGE_DATA_LENGTH: TypedContractMethod<[], [bigint], "view">;

  coordinatorPubKey: TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;

  coordinatorPubKeyHash: TypedContractMethod<[], [bigint], "view">;

  currentSbCommitment: TypedContractMethod<[], [bigint], "view">;

  extContracts: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        maci: string;
        messageAq: string;
        topupCredit: string;
      }
    ],
    "view"
  >;

  getDeployTimeAndDuration: TypedContractMethod<
    [],
    [[bigint, bigint] & { pollDeployTime: bigint; pollDuration: bigint }],
    "view"
  >;

  hash2: TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash3: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash4: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash5: TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;

  hashLeftRight: TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;

  hashMessageAndEncPubKey: TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [bigint],
    "view"
  >;

  hashStateLeaf: TypedContractMethod<
    [_stateLeaf: DomainObjs.StateLeafStruct],
    [bigint],
    "view"
  >;

  init: TypedContractMethod<[], [void], "nonpayable">;

  maxValues: TypedContractMethod<
    [],
    [[bigint, bigint] & { maxMessages: bigint; maxVoteOptions: bigint }],
    "view"
  >;

  mergeMaciStateAq: TypedContractMethod<
    [_pollId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mergeMaciStateAqSubRoots: TypedContractMethod<
    [_numSrQueueOps: BigNumberish, _pollId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mergeMessageAq: TypedContractMethod<[], [void], "nonpayable">;

  mergeMessageAqSubRoots: TypedContractMethod<
    [_numSrQueueOps: BigNumberish],
    [void],
    "nonpayable"
  >;

  mergedStateRoot: TypedContractMethod<[], [bigint], "view">;

  numMessages: TypedContractMethod<[], [bigint], "view">;

  numSignUpsAndMessages: TypedContractMethod<
    [],
    [[bigint, bigint] & { numSUps: bigint; numMsgs: bigint }],
    "view"
  >;

  numSignups: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  padAndHashMessage: TypedContractMethod<
    [dataToPad: [BigNumberish, BigNumberish], msgType: BigNumberish],
    [
      [
        DomainObjs.MessageStructOutput,
        DomainObjs.PubKeyStructOutput,
        bigint
      ] & {
        message: DomainObjs.MessageStructOutput;
        padKey: DomainObjs.PubKeyStructOutput;
        msgHash: bigint;
      }
    ],
    "view"
  >;

  publishMessage: TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [void],
    "nonpayable"
  >;

  publishMessageBatch: TypedContractMethod<
    [
      _messages: DomainObjs.MessageStruct[],
      _encPubKeys: DomainObjs.PubKeyStruct[]
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sha256Hash: TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;

  stateAqMerged: TypedContractMethod<[], [boolean], "view">;

  topup: TypedContractMethod<
    [stateIndex: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treeDepths: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        intStateTreeDepth: bigint;
        messageTreeSubDepth: bigint;
        messageTreeDepth: bigint;
        voteOptionTreeDepth: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MESSAGE_DATA_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "coordinatorPubKey"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { x: bigint; y: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "coordinatorPubKeyHash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSbCommitment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extContracts"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        maci: string;
        messageAq: string;
        topupCredit: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeployTimeAndDuration"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { pollDeployTime: bigint; pollDuration: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash2"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash3"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash4"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash5"
  ): TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashMessageAndEncPubKey"
  ): TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashStateLeaf"
  ): TypedContractMethod<
    [_stateLeaf: DomainObjs.StateLeafStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxValues"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { maxMessages: bigint; maxVoteOptions: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "mergeMaciStateAq"
  ): TypedContractMethod<[_pollId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mergeMaciStateAqSubRoots"
  ): TypedContractMethod<
    [_numSrQueueOps: BigNumberish, _pollId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mergeMessageAq"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mergeMessageAqSubRoots"
  ): TypedContractMethod<[_numSrQueueOps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mergedStateRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numMessages"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numSignUpsAndMessages"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { numSUps: bigint; numMsgs: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "numSignups"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "padAndHashMessage"
  ): TypedContractMethod<
    [dataToPad: [BigNumberish, BigNumberish], msgType: BigNumberish],
    [
      [
        DomainObjs.MessageStructOutput,
        DomainObjs.PubKeyStructOutput,
        bigint
      ] & {
        message: DomainObjs.MessageStructOutput;
        padKey: DomainObjs.PubKeyStructOutput;
        msgHash: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishMessage"
  ): TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "publishMessageBatch"
  ): TypedContractMethod<
    [
      _messages: DomainObjs.MessageStruct[],
      _encPubKeys: DomainObjs.PubKeyStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sha256Hash"
  ): TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "stateAqMerged"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "topup"
  ): TypedContractMethod<
    [stateIndex: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treeDepths"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        intStateTreeDepth: bigint;
        messageTreeSubDepth: bigint;
        messageTreeDepth: bigint;
        voteOptionTreeDepth: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "MergeMaciStateAq"
  ): TypedContractEvent<
    MergeMaciStateAqEvent.InputTuple,
    MergeMaciStateAqEvent.OutputTuple,
    MergeMaciStateAqEvent.OutputObject
  >;
  getEvent(
    key: "MergeMaciStateAqSubRoots"
  ): TypedContractEvent<
    MergeMaciStateAqSubRootsEvent.InputTuple,
    MergeMaciStateAqSubRootsEvent.OutputTuple,
    MergeMaciStateAqSubRootsEvent.OutputObject
  >;
  getEvent(
    key: "MergeMessageAq"
  ): TypedContractEvent<
    MergeMessageAqEvent.InputTuple,
    MergeMessageAqEvent.OutputTuple,
    MergeMessageAqEvent.OutputObject
  >;
  getEvent(
    key: "MergeMessageAqSubRoots"
  ): TypedContractEvent<
    MergeMessageAqSubRootsEvent.InputTuple,
    MergeMessageAqSubRootsEvent.OutputTuple,
    MergeMessageAqSubRootsEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PublishMessage"
  ): TypedContractEvent<
    PublishMessageEvent.InputTuple,
    PublishMessageEvent.OutputTuple,
    PublishMessageEvent.OutputObject
  >;
  getEvent(
    key: "TopupMessage"
  ): TypedContractEvent<
    TopupMessageEvent.InputTuple,
    TopupMessageEvent.OutputTuple,
    TopupMessageEvent.OutputObject
  >;

  filters: {
    "MergeMaciStateAq(uint256,uint256)": TypedContractEvent<
      MergeMaciStateAqEvent.InputTuple,
      MergeMaciStateAqEvent.OutputTuple,
      MergeMaciStateAqEvent.OutputObject
    >;
    MergeMaciStateAq: TypedContractEvent<
      MergeMaciStateAqEvent.InputTuple,
      MergeMaciStateAqEvent.OutputTuple,
      MergeMaciStateAqEvent.OutputObject
    >;

    "MergeMaciStateAqSubRoots(uint256)": TypedContractEvent<
      MergeMaciStateAqSubRootsEvent.InputTuple,
      MergeMaciStateAqSubRootsEvent.OutputTuple,
      MergeMaciStateAqSubRootsEvent.OutputObject
    >;
    MergeMaciStateAqSubRoots: TypedContractEvent<
      MergeMaciStateAqSubRootsEvent.InputTuple,
      MergeMaciStateAqSubRootsEvent.OutputTuple,
      MergeMaciStateAqSubRootsEvent.OutputObject
    >;

    "MergeMessageAq(uint256)": TypedContractEvent<
      MergeMessageAqEvent.InputTuple,
      MergeMessageAqEvent.OutputTuple,
      MergeMessageAqEvent.OutputObject
    >;
    MergeMessageAq: TypedContractEvent<
      MergeMessageAqEvent.InputTuple,
      MergeMessageAqEvent.OutputTuple,
      MergeMessageAqEvent.OutputObject
    >;

    "MergeMessageAqSubRoots(uint256)": TypedContractEvent<
      MergeMessageAqSubRootsEvent.InputTuple,
      MergeMessageAqSubRootsEvent.OutputTuple,
      MergeMessageAqSubRootsEvent.OutputObject
    >;
    MergeMessageAqSubRoots: TypedContractEvent<
      MergeMessageAqSubRootsEvent.InputTuple,
      MergeMessageAqSubRootsEvent.OutputTuple,
      MergeMessageAqSubRootsEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PublishMessage(tuple,tuple)": TypedContractEvent<
      PublishMessageEvent.InputTuple,
      PublishMessageEvent.OutputTuple,
      PublishMessageEvent.OutputObject
    >;
    PublishMessage: TypedContractEvent<
      PublishMessageEvent.InputTuple,
      PublishMessageEvent.OutputTuple,
      PublishMessageEvent.OutputObject
    >;

    "TopupMessage(tuple)": TypedContractEvent<
      TopupMessageEvent.InputTuple,
      TopupMessageEvent.OutputTuple,
      TopupMessageEvent.OutputObject
    >;
    TopupMessage: TypedContractEvent<
      TopupMessageEvent.InputTuple,
      TopupMessageEvent.OutputTuple,
      TopupMessageEvent.OutputObject
    >;
  };
}
