/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEAS {
  export type AttestationStruct = {
    uid: BytesLike;
    schema: BytesLike;
    time: BigNumberish;
    expirationTime: BigNumberish;
    revocationTime: BigNumberish;
    refUID: BytesLike;
    recipient: AddressLike;
    attester: AddressLike;
    revocable: boolean;
    data: BytesLike;
  };

  export type AttestationStructOutput = [
    uid: string,
    schema: string,
    time: bigint,
    expirationTime: bigint,
    revocationTime: bigint,
    refUID: string,
    recipient: string,
    attester: string,
    revocable: boolean,
    data: string
  ] & {
    uid: string;
    schema: string;
    time: bigint;
    expirationTime: bigint;
    revocationTime: bigint;
    refUID: string;
    recipient: string;
    attester: string;
    revocable: boolean;
    data: string;
  };
}

export interface IEASInterface extends Interface {
  getFunction(nameOrSignature: "getAttestation"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
}

export interface IEAS extends BaseContract {
  connect(runner?: ContractRunner | null): IEAS;
  waitForDeployment(): Promise<this>;

  interface: IEASInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAttestation: TypedContractMethod<
    [uid: BytesLike],
    [IEAS.AttestationStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAttestation"
  ): TypedContractMethod<
    [uid: BytesLike],
    [IEAS.AttestationStructOutput],
    "view"
  >;

  filters: {};
}
