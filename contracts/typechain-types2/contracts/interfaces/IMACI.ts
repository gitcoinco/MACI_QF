/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IMACIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getStateAqRoot"
      | "mergeStateAq"
      | "mergeStateAqSubRoots"
      | "numSignUps"
      | "stateAq"
      | "stateTreeDepth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStateAqRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateAq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateTreeDepth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getStateAqRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numSignUps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stateAq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateTreeDepth",
    data: BytesLike
  ): Result;
}

export interface IMACI extends BaseContract {
  connect(runner?: ContractRunner | null): IMACI;
  waitForDeployment(): Promise<this>;

  interface: IMACIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getStateAqRoot: TypedContractMethod<[], [bigint], "view">;

  mergeStateAq: TypedContractMethod<
    [_pollId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  mergeStateAqSubRoots: TypedContractMethod<
    [_numSrQueueOps: BigNumberish, _pollId: BigNumberish],
    [void],
    "nonpayable"
  >;

  numSignUps: TypedContractMethod<[], [bigint], "view">;

  stateAq: TypedContractMethod<[], [string], "view">;

  stateTreeDepth: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getStateAqRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mergeStateAq"
  ): TypedContractMethod<[_pollId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "mergeStateAqSubRoots"
  ): TypedContractMethod<
    [_numSrQueueOps: BigNumberish, _pollId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "numSignUps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stateAq"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stateTreeDepth"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
