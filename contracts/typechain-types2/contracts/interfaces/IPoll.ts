/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DomainObjs {
  export type MessageStruct = { msgType: BigNumberish; data: BigNumberish[] };

  export type MessageStructOutput = [msgType: bigint, data: bigint[]] & {
    msgType: bigint;
    data: bigint[];
  };

  export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

  export type PubKeyStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };
}

export interface IPollInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "coordinatorPubKeyHash"
      | "currentSbCommitment"
      | "extContracts"
      | "getDeployTimeAndDuration"
      | "maxValues"
      | "mergeMaciStateAq"
      | "mergeMaciStateAqSubRoots"
      | "mergeMessageAq"
      | "mergeMessageAqSubRoots"
      | "numSignUpsAndMessages"
      | "publishMessage"
      | "stateAqMerged"
      | "topup"
      | "treeDepths"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "coordinatorPubKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployTimeAndDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxValues", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mergeMaciStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMaciStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAqSubRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUpsAndMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [DomainObjs.MessageStruct, DomainObjs.PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stateAqMerged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "treeDepths",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "coordinatorPubKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployTimeAndDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxValues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mergeMaciStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMaciStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numSignUpsAndMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateAqMerged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treeDepths", data: BytesLike): Result;
}

export interface IPoll extends BaseContract {
  connect(runner?: ContractRunner | null): IPoll;
  waitForDeployment(): Promise<this>;

  interface: IPollInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  coordinatorPubKeyHash: TypedContractMethod<[], [bigint], "view">;

  currentSbCommitment: TypedContractMethod<[], [bigint], "view">;

  extContracts: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        maci: string;
        messageAq: string;
        topupCredit: string;
      }
    ],
    "view"
  >;

  getDeployTimeAndDuration: TypedContractMethod<
    [],
    [[bigint, bigint] & { _deployTime: bigint; _duration: bigint }],
    "view"
  >;

  maxValues: TypedContractMethod<
    [],
    [[bigint, bigint] & { maxMessages: bigint; maxVoteOptions: bigint }],
    "view"
  >;

  mergeMaciStateAq: TypedContractMethod<
    [_pollId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mergeMaciStateAqSubRoots: TypedContractMethod<
    [_numSrQueueOps: BigNumberish, _pollId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mergeMessageAq: TypedContractMethod<[], [void], "nonpayable">;

  mergeMessageAqSubRoots: TypedContractMethod<
    [_numSrQueueOps: BigNumberish],
    [void],
    "nonpayable"
  >;

  numSignUpsAndMessages: TypedContractMethod<
    [],
    [[bigint, bigint] & { numSignups: bigint; numMsgs: bigint }],
    "view"
  >;

  publishMessage: TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [void],
    "nonpayable"
  >;

  stateAqMerged: TypedContractMethod<[], [boolean], "view">;

  topup: TypedContractMethod<
    [stateIndex: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  treeDepths: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        intStateTreeDepth: bigint;
        messageTreeSubDepth: bigint;
        messageTreeDepth: bigint;
        voteOptionTreeDepth: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "coordinatorPubKeyHash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSbCommitment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extContracts"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        maci: string;
        messageAq: string;
        topupCredit: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeployTimeAndDuration"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _deployTime: bigint; _duration: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxValues"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { maxMessages: bigint; maxVoteOptions: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "mergeMaciStateAq"
  ): TypedContractMethod<[_pollId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mergeMaciStateAqSubRoots"
  ): TypedContractMethod<
    [_numSrQueueOps: BigNumberish, _pollId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mergeMessageAq"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mergeMessageAqSubRoots"
  ): TypedContractMethod<[_numSrQueueOps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "numSignUpsAndMessages"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { numSignups: bigint; numMsgs: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishMessage"
  ): TypedContractMethod<
    [_message: DomainObjs.MessageStruct, _encPubKey: DomainObjs.PubKeyStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stateAqMerged"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "topup"
  ): TypedContractMethod<
    [stateIndex: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treeDepths"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        intStateTreeDepth: bigint;
        messageTreeSubDepth: bigint;
        messageTreeDepth: bigint;
        voteOptionTreeDepth: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
