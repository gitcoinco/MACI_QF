/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockHatsProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createHat"
      | "hats"
      | "isWearerOfHat"
      | "lastHat"
      | "lastTopHat"
      | "mintHat"
      | "mintTopHat"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createHat",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      AddressLike,
      AddressLike,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "hats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWearerOfHat",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lastHat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTopHat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintHat",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTopHat",
    values: [AddressLike, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "createHat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWearerOfHat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastHat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastTopHat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintHat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTopHat", data: BytesLike): Result;
}

export interface MockHatsProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): MockHatsProtocol;
  waitForDeployment(): Promise<this>;

  interface: MockHatsProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createHat: TypedContractMethod<
    [
      _admin: BigNumberish,
      _details: string,
      _maxSupply: BigNumberish,
      _eligibility: AddressLike,
      _toggle: AddressLike,
      _mutable: boolean,
      _imageURI: string
    ],
    [bigint],
    "nonpayable"
  >;

  hats: TypedContractMethod<[], [string], "view">;

  isWearerOfHat: TypedContractMethod<
    [account: AddressLike, hat: BigNumberish],
    [boolean],
    "view"
  >;

  lastHat: TypedContractMethod<[], [bigint], "view">;

  lastTopHat: TypedContractMethod<[], [bigint], "view">;

  mintHat: TypedContractMethod<
    [_hatId: BigNumberish, _wearer: AddressLike],
    [boolean],
    "nonpayable"
  >;

  mintTopHat: TypedContractMethod<
    [_target: AddressLike, _details: string, _imageURI: string],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createHat"
  ): TypedContractMethod<
    [
      _admin: BigNumberish,
      _details: string,
      _maxSupply: BigNumberish,
      _eligibility: AddressLike,
      _toggle: AddressLike,
      _mutable: boolean,
      _imageURI: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hats"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isWearerOfHat"
  ): TypedContractMethod<
    [account: AddressLike, hat: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastHat"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTopHat"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintHat"
  ): TypedContractMethod<
    [_hatId: BigNumberish, _wearer: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintTopHat"
  ): TypedContractMethod<
    [_target: AddressLike, _details: string, _imageURI: string],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
