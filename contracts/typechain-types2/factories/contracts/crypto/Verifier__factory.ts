/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Verifier,
  VerifierInterface,
} from "../../../contracts/crypto/Verifier";

const _abi = [
  {
    inputs: [],
    name: "InvalidInputVal",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProofQ",
    type: "error",
  },
  {
    inputs: [],
    name: "PairingAddFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "PairingMulFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "PairingOpcodeFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "PRIME_Q",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "_proof",
        type: "uint256[8]",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "alpha1",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "beta2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "gamma2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "delta2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point[]",
            name: "ic",
            type: "tuple[]",
          },
        ],
        internalType: "struct SnarkCommon.VerifyingKey",
        name: "vk",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "input",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c59806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806322b72c941461003b5780638d53290814610063575b600080fd5b61004e610049366004610a03565b610086565b60405190151581526020015b60405180910390f35b610078600080516020610c0483398151915281565b60405190815260200161005a565b6000610090610704565b6040805180820182528651815260208088015181830152908352815160808082018452888401518285019081526060808b01519084015282528351808501855290890151815260a08901518184015281830152838201528151808301835260c0880151815260e0880151918101919091529082015280515161011190610284565b80516020015161012090610284565b6020810151516101379060005b6020020151610284565b602080820151015161014a90600061012d565b60208101515161015b90600161012d565b602080820151015161016e90600161012d565b60408101515161017d90610284565b61018e816040015160200151610284565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183106101ce5760405163076be92360e31b815260040160405180910390fd5b60006040518060400160405280600081526020016000815250905061021a81610215876080015160018151811061020757610207610b60565b6020026020010151876102b5565b610327565b905061024481866080015160008151811061023757610237610b60565b6020026020010151610327565b905061027a610256836000015161039f565b836020015187600001518860200151858a6040015188604001518c60600151610435565b9695505050505050565b600080516020610c0483398151915281106102b2576040516308f69c9160e01b815260040160405180910390fd5b50565b60408051808201909152600080825260208201526102d1610755565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808061030057fe5b508061031f576040516372ffac5560e11b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610343610773565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808061037d57fe5b508061031f5760405160016203c15f60e01b0319815260040160405180910390fd5b604080518082019091526000808252602082015281511580156103c457506020820151155b156103e2575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020610c0483398151915284602001516104159190610b76565b61042d90600080516020610c04833981519152610bae565b905292915050565b600061043f610791565b89815260208101889052604081018690526060810184905261045f6107ca565b898152602081018890526040808201879052606082018590528051601880825261032082019092526000908281602001602082028036833701905050905060005b60048160ff1610156106a85760006104b9826006610bc7565b9050858260ff16600481106104d0576104d0610b60565b602002015151836104e2836000610bea565b60ff16815181106104f5576104f5610b60565b602002602001018181525050858260ff166004811061051657610516610b60565b6020020151602001518382600161052d9190610bea565b60ff168151811061054057610540610b60565b602002602001018181525050848260ff166004811061056157610561610b60565b6020020151515183610574836002610bea565b60ff168151811061058757610587610b60565b602002602001018181525050848260ff16600481106105a8576105a8610b60565b60200201515160016020020151836105c1836003610bea565b60ff16815181106105d4576105d4610b60565b602002602001018181525050848260ff16600481106105f5576105f5610b60565b60200201516020015160006002811061061057610610610b60565b602002015183610621836004610bea565b60ff168151811061063457610634610b60565b602002602001018181525050848260ff166004811061065557610655610b60565b60200201516020015160016002811061067057610670610b60565b602002015183610681836005610bea565b60ff168151811061069457610694610b60565b6020908102919091010152506001016104a0565b506106b16107f7565b6000602082602086026020860160086107d05a03fa905080806106d057fe5b50806106ef57604051630143d56760e11b815260040160405180910390fd5b505115159d9c50505050505050505050505050565b6040805160a08101909152600060608201818152608083019190915281526020810161072e610815565b8152602001610750604051806040016040528060008152602001600081525090565b905290565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180608001604052806004905b60408051808201909152600080825260208201528152602001906001900390816107a05790505090565b60405180608001604052806004905b6107e1610815565b8152602001906001900390816107d95790505090565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280610828610831565b81526020016107505b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156108885761088861084f565b60405290565b60405160a0810167ffffffffffffffff811182821017156108885761088861084f565b604051601f8201601f1916810167ffffffffffffffff811182821017156108da576108da61084f565b604052919050565b600060405161010080820182811067ffffffffffffffff821117156109095761090961084f565b604052909150819083018481111561092057600080fd5b835b8181101561093a578035835260209283019201610922565b50505092915050565b60006040828403121561095557600080fd5b61095d610865565b9050813581526020820135602082015292915050565b600082601f83011261098457600080fd5b61098c610865565b80604084018581111561099e57600080fd5b845b818110156109b85780358452602093840193016109a0565b509095945050505050565b6000608082840312156109d557600080fd5b6109dd610865565b90506109e98383610973565b81526109f88360408401610973565b602082015292915050565b6000806000610140808587031215610a1a57600080fd5b85601f860112610a2957600080fd5b610a3386866108e2565b935061010085013567ffffffffffffffff80821115610a5157600080fd5b908601906101e08289031215610a6657600080fd5b610a6e61088e565b610a788984610943565b81526040610a888a8286016109c3565b60208181850152610a9c8c60c088016109c3565b83850152610aac8c8888016109c3565b60608501526101c0860135965084871115610ac657600080fd5b86860196508b601f880112610ada57600080fd5b8635955084861115610aee57610aee61084f565b610afc818760051b016108b1565b86815260069690961b8701810195818101955091508b861115610b1e57600080fd5b958601955b85871015610b4457610b358c88610943565b85529582019593840193610b23565b5060808301525095989597505050506101209390930135925050565b634e487b7160e01b600052603260045260246000fd5b600082610b9357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bc157610bc1610b98565b92915050565b60ff8181168382160290811690818114610be357610be3610b98565b5092915050565b60ff8181168382160190811115610bc157610bc1610b9856fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220ca7fcaa4068b2ff42b92750ce61f77c7d49ca7d873cd24ef417f342aea11dad664736f6c63430008140033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Verifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Verifier__factory {
    return super.connect(runner) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new Interface(_abi) as VerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Verifier {
    return new Contract(address, _abi, runner) as unknown as Verifier;
  }
}
