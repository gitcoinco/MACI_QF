/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ITallyFactory,
  ITallyFactoryInterface,
} from "../../../contracts/interfaces/ITallyFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vkRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poll",
        type: "address",
      },
      {
        internalType: "address",
        name: "_messageProcessor",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "enum DomainObjs.Mode",
        name: "_mode",
        type: "uint8",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ITallyFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ITallyFactoryInterface {
    return new Interface(_abi) as ITallyFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ITallyFactory {
    return new Contract(address, _abi, runner) as unknown as ITallyFactory;
  }
}
