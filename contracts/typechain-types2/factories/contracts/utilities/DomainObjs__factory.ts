/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DomainObjs,
  DomainObjsInterface,
} from "../../../contracts/utilities/DomainObjs";

const _abi = [
  {
    inputs: [],
    name: "MESSAGE_DATA_LENGTH",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063683f3dc314602d575b600080fd5b6034600a81565b60405160ff909116815260200160405180910390f3fea2646970667358221220a0fd4f154cda9718a9e783c1d5194d3e6ac7e10bde1f415b686e640d273a817964736f6c63430008140033";

type DomainObjsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DomainObjsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DomainObjs__factory extends ContractFactory {
  constructor(...args: DomainObjsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DomainObjs & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DomainObjs__factory {
    return super.connect(runner) as DomainObjs__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DomainObjsInterface {
    return new Interface(_abi) as DomainObjsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DomainObjs {
    return new Contract(address, _abi, runner) as unknown as DomainObjs;
  }
}
