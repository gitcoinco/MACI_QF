/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AccQueueBinary0,
  AccQueueBinary0Interface,
} from "../../../contracts/trees/AccQueueBinary0";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subDepth",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DepthCannotBeZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256",
      },
    ],
    name: "DepthTooLarge",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "min",
        type: "uint256",
      },
    ],
    name: "DepthTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidHashLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "InvalidIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLevel",
    type: "error",
  },
  {
    inputs: [],
    name: "NothingToMerge",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "SubDepthCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "SubTreesAlreadyMerged",
    type: "error",
  },
  {
    inputs: [],
    name: "SubTreesNotMerged",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subDepth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256",
      },
    ],
    name: "SubdepthTooLarge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_DEPTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calcMinHeight",
    outputs: [
      {
        internalType: "uint256",
        name: "depth",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_leaf",
        type: "uint256",
      },
    ],
    name: "enqueue",
    outputs: [
      {
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
    ],
    name: "getMainRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "mainRoot",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSmallSRTroot",
    outputs: [
      {
        internalType: "uint256",
        name: "smallSubTreeRoot",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSrIndices",
    outputs: [
      {
        internalType: "uint256",
        name: "next",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getSubRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "subRoot",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "array",
        type: "uint256[2]",
      },
    ],
    name: "hash2",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "array",
        type: "uint256[3]",
      },
    ],
    name: "hash3",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[4]",
        name: "array",
        type: "uint256[4]",
      },
    ],
    name: "hash4",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[5]",
        name: "array",
        type: "uint256[5]",
      },
    ],
    name: "hash5",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "left",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "right",
        type: "uint256",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_leaf",
        type: "uint256",
      },
    ],
    name: "hashLevelLeaf",
    outputs: [
      {
        internalType: "uint256",
        name: "hashed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subRoot",
        type: "uint256",
      },
    ],
    name: "insertSubTree",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_depth",
        type: "uint256",
      },
    ],
    name: "merge",
    outputs: [
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_numSrQueueOps",
        type: "uint256",
      },
    ],
    name: "mergeSubRoots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "numLeaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "array",
        type: "uint256[]",
      },
    ],
    name: "sha256Hash",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "subTreesMerged",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treeMerged",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b50604051620020f8380380620020f883398101604081905262000034916200061f565b8080600233806200006057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200006b81620005cf565b50816000036200008e5760405163682e504160e11b815260040160405180910390fd5b6020821115620000bc57604051637ccdcc9760e11b8152600481018390526020602482015260440162000057565b80600214158015620000cf575080600514155b15620000ee57604051636f7b6c0360e01b815260040160405180910390fd5b6000805460ff60a01b191660028314600160a01b02179055608082905260a08190526200011c82826200074e565b60c052505060006101725550507f2098f5fb9e239eab3ceac3f27b81e481dc3124d55ffed523a839ee8446b64864610173557f1069673dcdb12263df301a6ff584a7ec261a44cb9dc68df067a4774460b1f1e1610174557f18f43331537ee2af2e3d758d50f72106467c6eea50371dd528d57eb2b856d238610175557f07f9d837cb17b0d36320ffe93ba52345f1b728571a568265caac97559dbc952a610176557f2b94cf5e8746b3f5c9631f4c5df32907a699c58c94b2ad4d7b5cec1639183f55610177557f2dee93c5a666459646ea7d22cca9e1bcfed71e6951b953611d11dda32ea09d78610178557f078295e5a22b84e982cf601eb639597b8b0515a88cb5ac7fa8a4aabe3c87349d610179557f2fa5e5f18f6027a6501bec864564472a616b2e274a41211a444cbe3a99f3cc6161017a557f0e884376d0d8fd21ecb780389e941f66e45e7acce3e228ab3e2156a614fcd74761017b557f1b7201da72494f1e28717ad1a52eb469f95892f957713533de6175e5da190af261017c557f1f8d8822725e36385200c0b201249819a6e6e1e4650808b5bebc6bface7d763661017d557f2c5d82f66c914bafb9701589ba8cfcfb6162b0a12acf88a8d0879a0471b5f85a61017e557f14c54148a0940bb820957f5adf3fa1134ef5c4aaa113f4646458f270e0bfbfd061017f557f190d33b12f986f961e10c0ee44d8b9af11be25588cad89d416118e4bf4ebe80c610180557f22f98aa9ce704152ac17354914ad73ed1167ae6596af510aa5b3649325e06c92610181557f2a7c7c9b6ce5880b9f6f228d72bf6a575a526f29c66ecceef8b753d38bba7323610182557f2e8186e558698ec1c67af9c14d463ffc470043c9c2988b954d75dd643f36b992610183557f0f57c5571e9a4eab49e2c8cf050dae948aef6ead647392273546249d1c1ff10f610184557f1830ee67b5fb554ad5f63d4388800e1cfe78e310697d46e43c9ce36134f72cca610185557f2134e76ac5d21aab186c2be1dd8f84ee880a1e46eaf712f9d371b6df22191f3e610186557f19df90ec844ebc4ffeebd866f33859b0c051d8c958ee3aa88f8f8df3db91a5b1610187557f18cca2a66b5c0787981e69aefd84852d74af0e93ef4912b4648c05f722efe52b610188557f2388909415230d1b4d1304d2d54f473a628338f2efad83fadf05644549d2538d610189557f27171fb4a97b6cc0e9e8f543b5294de866a2af2c9c8d0b1d96e673e4529ed54061018a557f2ff6650540f629fd5711a0bc74fc0d28dcb230b9392583e5f8d59696dde6ae2161018b557f120c58f143d491e95902f7f5277778a2e0ad5168f6add75669932630ce61151861018c557f1f21feb70d3f21b07bf853d5e5db03071ec495a0a565a21da2d665d27948379561018d557f24be905fa71335e14c638cc0f66a8623a826e768068a9e968bb1a1dde18a72d261018e557f0f8666b62ed17491c50ceadead57d4cd597ef3821d65c328744c74e553dac26d61018f557f0918d46bf52d98b034413f4a1a1c41594e7a7a3f6ae08cb43d1a2a230e1959ef610190557f1bbeb01b4c479ecde76917645e404dfa2e26f90d0afc5a65128513ad375c5ff2610191557f2f68a1c58e257e42a17a6c61dff5551ed560b9922ab119d5ac8e184c9734ead96101925562000763565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200063257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200069057816000190482111562000674576200067462000639565b808516156200068257918102915b93841c939080029062000654565b509250929050565b600082620006a95750600162000748565b81620006b85750600062000748565b8160018114620006d15760028114620006dc57620006fc565b600191505062000748565b60ff841115620006f057620006f062000639565b50506001821b62000748565b5060208310610133831016604e8410600b841016171562000721575081810a62000748565b6200072d83836200064f565b806000190482111562000744576200074462000639565b0290505b92915050565b60006200075c838362000698565b9392505050565b60805160a05160c0516118ee6200080a600039600081816103ea015281816109b001528181610a4d01528181610c0a0152610d0d0152600081816103230152818161056e015281816106e401528181610b3f01528181610e4e0152610fc201526000818161041a0152818161047b0152818161054401528181610b7801528181610c4301528181610c8d01528181610def01528181610ea5015261115e01526118ee6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806381d6a24a116100c3578063c00bdbcc1161007c578063c00bdbcc146102b8578063c15da65b146102cb578063d9c55ce1146102de578063dda89a6e146102e6578063e93fb4d4146102f0578063f2fde38b1461030357600080fd5b806381d6a24a146102455780638da5cb5b146102615780639cfced971461027c578063a27154ba1461028f578063b6a64acd14610297578063bea140b3146102a557600080fd5b806358bfc3791161011557806358bfc379146101cc5780635bb93995146101df5780635bf1fa4d146101f257806362a361bb1461020557806369e7c58614610218578063715018a61461023b57600080fd5b80631b9b8aa71461015d5780631ffc735d1461018357806324a47aeb146101965780633bfa6fce146101a95780633dfb88b2146101b15780633e1a8cc1146101c4575b600080fd5b61017061016b366004611302565b610316565b6040519081526020015b60405180910390f35b610170610191366004611302565b610399565b6101706101a4366004611302565b6104c7565b6101706106d8565b6101706101bf366004611362565b610723565b6101706107a4565b6101706101da3660046113e0565b6107d3565b6101706101ed366004611486565b61086d565b610170610200366004611486565b610892565b6101706102133660046114a8565b6108bc565b61016e5461022b90610100900460ff1681565b604051901515815260200161017a565b6102436108f6565b005b610170546001546040805192835260208301919091520161017a565b6000546040516001600160a01b03909116815260200161017a565b61017061028a366004611503565b61090a565b610170602081565b61016e5461022b9060ff1681565b6101706102b336600461155c565b610944565b6102436102c6366004611302565b61097e565b6102436102d9366004611302565b6109fa565b610243610c00565b6101706101715481565b6101706102fe366004611302565b610d4a565b6102436103113660046115b5565b610d85565b61017154600090610347837f00000000000000000000000000000000000000000000000000000000000000006116d8565b101561037d5761017154604051627289df60e61b8152610374918491600401918252602082015260400190565b60405180910390fd5b61014d8260218110610391576103916116e4565b015492915050565b60006103a3610dc0565b50610171546103b3826000610ded565b6103be8160016116fa565b610171556103cf61014d6000611267565b600061016f5561016e805460ff191690556101715461040f907f00000000000000000000000000000000000000000000000000000000000000009061170d565b6000036104c25760027f000000000000000000000000000000000000000000000000000000000000000060218110610449576104496116e4565b600402015460018054600090815261014c60205260408120929092558054916104718361172f565b90915550600290507f0000000000000000000000000000000000000000000000000000000000000000602181106104aa576104aa6116e4565b6004020160008091018190556104c290608690611267565b919050565b60006104d1610dc0565b816000036104f257604051630543d40760e11b815260040160405180910390fd5b61016e5460ff1661051657604051631e596e4360e11b815260040160405180910390fd5b602082111561054257604051632cd31ae960e01b81526004810183905260206024820152604401610374565b7f00000000000000000000000000000000000000000000000000000000000000005b61017154610592827f00000000000000000000000000000000000000000000000000000000000000006116d8565b10156105aa57806105a28161172f565b915050610564565b808310156105d457604051627289df60e61b81526004810184905260248101829052604401610374565b8083036106105761016f5461014d84602181106105f3576105f36116e4565b0155505061016e805461ff00191661010017905561016f54919050565b61016f549150805b838110156106aa57600061062b82610f2e565b600054909150600160a01b900460ff161561066357610648611276565b8481526020810182905261065b816108bc565b945050610697565b61066b611294565b848152602081018290526040810182905260608101829052608081018290526106938161090a565b9450505b50806106a28161172f565b915050610618565b508161014d84602181106106c0576106c06116e4565b015561016e805461ff00191661010017905550919050565b60015b600154610708827f00000000000000000000000000000000000000000000000000000000000000006116d8565b101561072057806107188161172f565b9150506106db565b90565b60405163248f667760e01b815260009073__$ce9c2c925f157047e54fa833ec4e61409f$__9063248f66779061075d908590600401611748565b602060405180830381865af415801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e9190611779565b92915050565b61016e5460009060ff166107cb57604051631e596e4360e11b815260040160405180910390fd5b5061016f5490565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016002836040516020016108099190611792565b60408051601f1981840301815290829052610823916117c8565b602060405180830381855afa158015610840573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108639190611779565b61079e919061170d565b6000610877611276565b8381526020810183905261088a816108bc565b949350505050565b60006108b5600284602181106108aa576108aa6116e4565b60040201548361086d565b9392505050565b6040516314d2f97b60e11b815260009073__$6574937f64fc1d7710ec0e28b7a36713bb$__906329a5f2f69061075d9085906004016117f7565b6108fe610dc0565b6109086000610f44565b565b604051630926f44b60e31b815260009073__$20527677031d76601747626a9845039fe4$__90634937a2589061075d90859060040161181f565b6040516304b98e1d60e31b815260009073__$dc01a9744591ab014bc46a3b7671cdaefb$__906325cc70e89061075d908590600401611847565b610986610dc0565b60018054600090815261014c60205260408120839055815491906109a98361172f565b91905055507f000000000000000000000000000000000000000000000000000000000000000061017160008282546109e191906116fa565b9091555050600061016f555061016e805460ff19169055565b610a02610dc0565b61016e5460ff1615610a2757604051630d36aec160e01b815260040160405180910390fd5b61017154600003610a4b576040516316a0341160e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061017154610a7a919061170d565b15610a8757610a87610c00565b600154600103610ab057610a9b6000610d4a565b61016f5561016e805460ff1916600117905550565b6000610aba6106d8565b610170549091506000905b600154811015610b36578315801590610add57508382145b15610ae85750505050565b610aff610af761017054610d4a565b600085610f94565b6101708054906000610b108361172f565b91905055508180610b209061172f565b9250508080610b2e9061172f565b915050610ac5565b506000610b63837f00000000000000000000000000000000000000000000000000000000000000006116d8565b90506001546101705403610bcc576000610b9c7f0000000000000000000000000000000000000000000000000000000000000000610f2e565b6001549091505b82811015610bc957610bb782600087610f94565b80610bc18161172f565b915050610ba3565b50505b60a78360218110610bdf57610bdf6116e4565b600402016000015461016f55505061016e805460ff19166001179055505b50565b610c08610dc0565b7f000000000000000000000000000000000000000000000000000000000000000061017154610c37919061170d565b600003610c7f57610c677f0000000000000000000000000000000000000000000000000000000000000000610f2e565b600154600090815261014c6020526040902055610cf0565b610c89600061115c565b60027f000000000000000000000000000000000000000000000000000000000000000060218110610cbc57610cbc6116e4565b6004020154600154600090815261014c6020526040812091909155610ce3906002906112b2565b610cf061014d6000611267565b60006001546001610d0191906116fa565b60018190559050610d327f00000000000000000000000000000000000000000000000000000000000000008261186f565b6101715550600061016f5561016e805460ff19169055565b60008160015411610d715760405163042a2e7160e11b815260048101839052602401610374565b50600090815261014c602052604090205490565b610d8d610dc0565b6001600160a01b038116610db757604051631e4fbdf760e01b815260006004820152602401610374565b610bfd81610f44565b6000546001600160a01b031633146109085760405163118cdaa760e01b8152336004820152602401610374565b7f0000000000000000000000000000000000000000000000000000000000000000811115610e2e5760405163d1459f7960e01b815260040160405180910390fd5b600060868260218110610e4357610e436116e4565b01549050610e7260017f0000000000000000000000000000000000000000000000000000000000000000611886565b8114610ef7578260028360218110610e8c57610e8c6116e4565b600402018260048110610ea157610ea16116e4565b01557f00000000000000000000000000000000000000000000000000000000000000008214610ef25760868260218110610edd57610edd6116e4565b018054906000610eec8361172f565b91905055505b505050565b610f018284611229565b925060868260218110610f1657610f166116e4565b600091015581610f258161172f565b92505050610e2e565b60006101728260218110610391576103916116e4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80821115610fa157505050565b600061012b8360218110610fb757610fb76116e4565b01549050610fe660017f0000000000000000000000000000000000000000000000000000000000000000611886565b8114611044578360a78460218110611000576110006116e4565b600402018260048110611015576110156116e4565b015561012b836021811061102b5761102b6116e4565b01805490600061103a8361172f565b9190505550611156565b60008054600160a01b900460ff16156110915761105f611276565b60a78560218110611072576110726116e4565b6004020154815260208101869052611089816108bc565b915050611126565b611099611294565b60005b838160ff1610156111005760a786602181106110ba576110ba6116e4565b600402018160ff16600481106110d2576110d26116e4565b0154828260ff16600581106110e9576110e96116e4565b6020020152806110f881611899565b91505061109c565b5085818460058110611114576111146116e4565b60200201526111228161090a565b9150505b61012b846021811061113a5761113a6116e4565b60009101556111548161114e8660016116fa565b85610f94565b505b50505050565b7f0000000000000000000000000000000000000000000000000000000000000000811015610bfd57600060868260218110611199576111996116e4565b0154905080156111fe5760006111ad611276565b60006111b885610f2e565b9050600285602181106111cd576111cd6116e4565b60040201548252602082018190526111e4826108bc565b92506111fa836111f58760016116fa565b610ded565b5050505b60868260218110611211576112116116e4565b6000910155816112208161172f565b9250505061115c565b6000611241600284602181106108aa576108aa6116e4565b905060028360218110611256576112566116e4565b600402016000016000905592915050565b50610bfd9060218101906112c1565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b50610bfd9060848101906112da565b5b808211156112d657600081556001016112c2565b5090565b808211156112d6576000808255600182018190556002820181905560038201556004016112da565b60006020828403121561131457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561135a5761135a61131b565b604052919050565b60006080828403121561137457600080fd5b82601f83011261138357600080fd5b6040516080810181811067ffffffffffffffff821117156113a6576113a661131b565b6040528060808401858111156113bb57600080fd5b845b818110156113d55780358352602092830192016113bd565b509195945050505050565b600060208083850312156113f357600080fd5b823567ffffffffffffffff8082111561140b57600080fd5b818501915085601f83011261141f57600080fd5b8135818111156114315761143161131b565b8060051b9150611442848301611331565b818152918301840191848101908884111561145c57600080fd5b938501935b8385101561147a57843582529385019390850190611461565b98975050505050505050565b6000806040838503121561149957600080fd5b50508035926020909101359150565b6000604082840312156114ba57600080fd5b82601f8301126114c957600080fd5b6040516040810181811067ffffffffffffffff821117156114ec576114ec61131b565b80604052508060408401858111156113bb57600080fd5b600060a0828403121561151557600080fd5b82601f83011261152457600080fd5b60405160a0810181811067ffffffffffffffff821117156115475761154761131b565b6040528060a08401858111156113bb57600080fd5b60006060828403121561156e57600080fd5b82601f83011261157d57600080fd5b6040516060810181811067ffffffffffffffff821117156115a0576115a061131b565b6040528060608401858111156113bb57600080fd5b6000602082840312156115c757600080fd5b81356001600160a01b03811681146108b557600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561162f578160001904821115611615576116156115de565b8085161561162257918102915b93841c93908002906115f9565b509250929050565b6000826116465750600161079e565b816116535750600061079e565b816001811461166957600281146116735761168f565b600191505061079e565b60ff841115611684576116846115de565b50506001821b61079e565b5060208310610133831016604e8410600b84101617156116b2575081810a61079e565b6116bc83836115f4565b80600019048211156116d0576116d06115de565b029392505050565b60006108b58383611637565b634e487b7160e01b600052603260045260246000fd5b8082018082111561079e5761079e6115de565b60008261172a57634e487b7160e01b600052601260045260246000fd5b500690565b600060018201611741576117416115de565b5060010190565b60808101818360005b6004811015611770578151835260209283019290910190600101611751565b50505092915050565b60006020828403121561178b57600080fd5b5051919050565b815160009082906020808601845b838110156117bc578151855293820193908201906001016117a0565b50929695505050505050565b6000825160005b818110156117e957602081860181015185830152016117cf565b506000920191825250919050565b60408101818360005b6002811015611770578151835260209283019290910190600101611800565b60a08101818360005b6005811015611770578151835260209283019290910190600101611828565b60608101818360005b6003811015611770578151835260209283019290910190600101611850565b808202811582820484141761079e5761079e6115de565b8181038181111561079e5761079e6115de565b600060ff821660ff81036118af576118af6115de565b6001019291505056fea2646970667358221220020fab20b8ac710a15eac228bf5fa89c3d38dbb62ccaf8414f98e095dca02ed864736f6c63430008140033";

type AccQueueBinary0ConstructorParams =
  | [linkLibraryAddresses: AccQueueBinary0LibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccQueueBinary0ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class AccQueueBinary0__factory extends ContractFactory {
  constructor(...args: AccQueueBinary0ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        AccQueueBinary0__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: AccQueueBinary0LibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ce9c2c925f157047e54fa833ec4e61409f\\$__", "g"),
      linkLibraryAddresses["contracts/crypto/PoseidonT5.sol:PoseidonT5"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$6574937f64fc1d7710ec0e28b7a36713bb\\$__", "g"),
      linkLibraryAddresses["contracts/crypto/PoseidonT3.sol:PoseidonT3"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$20527677031d76601747626a9845039fe4\\$__", "g"),
      linkLibraryAddresses["contracts/crypto/PoseidonT6.sol:PoseidonT6"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$dc01a9744591ab014bc46a3b7671cdaefb\\$__", "g"),
      linkLibraryAddresses["contracts/crypto/PoseidonT4.sol:PoseidonT4"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    _subDepth: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_subDepth, overrides || {});
  }
  override deploy(
    _subDepth: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_subDepth, overrides || {}) as Promise<
      AccQueueBinary0 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AccQueueBinary0__factory {
    return super.connect(runner) as AccQueueBinary0__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccQueueBinary0Interface {
    return new Interface(_abi) as AccQueueBinary0Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AccQueueBinary0 {
    return new Contract(address, _abi, runner) as unknown as AccQueueBinary0;
  }
}

export interface AccQueueBinary0LibraryAddresses {
  ["contracts/crypto/PoseidonT5.sol:PoseidonT5"]: string;
  ["contracts/crypto/PoseidonT3.sol:PoseidonT3"]: string;
  ["contracts/crypto/PoseidonT6.sol:PoseidonT6"]: string;
  ["contracts/crypto/PoseidonT4.sol:PoseidonT4"]: string;
}
